<%
var type = "mobileapp";
// Find the place for server URL
var serverURL = "https://192.168.1.1:9443/";
var goose = require('modules/goose.js').goose;
var Handle = require("/modules/handlebars.js").Handlebars;
var router = new goose({CONTEXT: "/store/api/"});
var configs = require('dataconf.json');
var log =new Log();
var store = require('/modules/store.js');

//	Refactor neccessary since the user routes don't belong here
// Find away to send the user email to the MDM server
router.get('/{context}/apis/{type}/{asset}/users/{userid}/devices', function(ctx){
	var mam = require('/modules/mam.js').mam;
	var mamServer = new mam({mdmServer:configs.mdmServer, user: ctx.userid});
	var result = mamServer.getDevices(session.get('user').username, ctx.platform);
	print(result.data);
});

/*
	iOS device will first perform a request to the below end point - it will serve a plist file
	with an endpoint to pickup the .ipa archive
*/
router.get("/{context}/apis/{type}/{asset}/install/ios/{name}", function(ctx){
	String appName = ctx.name;
	var file = new File("/publisher/upload/"+appName+".ipa");
	//Assuming that the extension is of 3 letters
	var iosManifest = compileTemplate("/assets/"+type+"/resources/ios_profile.hbs", {url:serverURL+"/publisher/upload/"+appName+".ipa", bundleid: "com.wso2mobile.phonebook.Phonebook", bundleversion: "1.0" appname:"WSO2Phone App"});
	print(iosManifest);
});



// DEVICES APIS
router.post('/{context}/apis/{type}/{asset}/devices/{deviceid}/install', function(ctx){
	var mam = require('/modules/mam.js').mam;
	var mamServer = new mam();
	
	var asset =  store.asset(type, ctx.asset);
	var url = asset.attributes.overview_url; 
	if(asset.attributes.overview_platform.toUpperCase()=='WEBAPP'){
		mamServer.installWebClip(url,getAsset(ctx.id).attributes.overview_name, ctx.deviceid);
	}
	url = serverURL+url;
	if(asset.attributes.overview_type.toUpperCase()=="MARKET"){
		url=asset.attributes.overview_packageName;
	}
	if(asset.attributes.overview_platform.toUpperCase()=='IOS'){
		mamServer.install(asset.attributes.overview_type, url, ctx.deviceid);
	}else if(asset.attributes.overview_platform.toUpperCase()=='ANDROID'){
		mamServer.install(asset.attributes.overview_type, url, ctx.deviceid);
	}
});

router.post('/{context}/apis/{type}/{asset}/devices/{deviceid}/uninstall', function(ctx){
	var asset =  store.asset(type, ctx.asset);
	var install_asset = asset.attributes.overview_packageName; 
	if(asset.attributes.overview_platform.toUpperCase()=='IOS'){
		install_asset = asset.attributes.overview_appid;
	}
	//saveAppToUser(ctx.id);
	var mam = require('/modules/mam.js').mam;
	var mamServer = new mam();
	mamServer.uninstall(install_asset, ctx.deviceid);
});

// router.get('devices/{deviceid}/apps/{id}/update', function(ctx){
// 	var package_name = getAsset(ctx.id).attributes.overview_packageName; 
// 	var mam = require('/modules/mam.js').mam;
// 	var mamServer = new mam();
// 	mamServer.uninstall(package_name,deviceid);
// });

// ARTIFACT APIS
router.get('apps', function(ctx){
	var paging = ctx.paging || 0;
	var items = store.assets(type, paging);
	items = sp(items);
	var state = ctx.state;
	var platform = ctx.platform;
	var sort = ctx.sort;
	if(platform!=undefined){
		items = filterByType(items, platform);
	}
	if(sort!=undefined){
		if(sort=="date"){
			items.sort(function (l, r) {
				log.info(l.attributes.overview_name);
			   var date1 =parseDate(l.attributes[l.attributes.overview_status+"_date"]).toDate();
			   var date2 = parseDate(r.attributes[r.attributes.overview_status+"_date"]).toDate();
			   return date2<date1?-1:date2>date1?1:0;
		    });
		}
	}
	print(items);
});

var filterByCategory function(items, category){
	var ite=[];
	for (var i = items.length - 1; i >= 0; i--){
	   var item = items[i];
	   if(item.attributes.overview_category==category){
			ite.push(item);
		}
	};
	return ite;
}
}

var filterByType = function(items,type){
	var ite=[];
	for (var i = items.length - 1; i >= 0; i--){
	   var item = items[i];
	   if(item.attributes.overview_platform==type){
			ite.push(item);
		}
	};
	return ite;
}

//Method to filter live artifacts
var sp = function(items){
	var arr = [];
	for (var i = items.length - 1; i >= 0; i--){
		var item = items[i];
		if(item.attributes.overview_status=="LIVE"){
			arr.push(spli(item));
		}
	};
	return arr;
}
//Method to convert the image screenshots to an array
var spli = function(item){
	if(item.attributes.overview_status=="LIVE"){
		if(item.attributes.images_screenshots){
			item.attributes.images_screenshots =item.attributes.images_screenshots.split(',');
		}
		return item;
	}
	return null;
}
var compileTemplate = function(templatePath, context){
	var template = Handle.compile(getResource(templatePath));
	return template(context);
}
%>
