<%
var absolute = require ('modules/absolute.js').mvc;
var goose = require('modules/goose.js').goose;
var router = new goose({CONTEXT: "/publisher/api/"});
var log =new Log();

var mvc = new absolute({
	SERVER_URL:"/publisher/",
	IGNORE:["sso.jag", "login.jag", "logout.jag"],
	API:"api",
	ROUTER: router
});

router.post('apps/upload',function(ctx){
	var files = ctx.files;
	var names = [];
	for(var name in files) {
		var file = files[name];
		file.saveAs("/uploads/"+file.getName());
	    names.push("/uploads/"+file.getName());
	}
	print(names);
	log.info(names);
});
// router.post('apps/upload1',function(ctx){
// 	log.info(request.getAllFiles());
// });

router.get('apps/{id}',function(ctx){
	
});

router.get('apps/{id}/publish', function(ctx){
	change("REVIEW",ctx.id);
});
router.get('apps/{id}/accept', function(ctx){
	change("PUBLISHED",ctx.id);
});
router.get('apps/{id}/reject', function(ctx){
	change("REJECTED",ctx.id);
});

router.get('dev/{id}/apps',function(ctx){
	var publisher = require('/modules/publisher.js');
	assets = publisher.assets('android', 1, ctx.id);
	print(assets);
});

// Still the lifecycles aren't working. There is noattachlifecyle in genericartifact class
router.post('apps',function(ctx){
	var t = "android";
	var carbon = require('carbon'),
	       server = new carbon.server.Server(),
	       registry = new carbon.registry.Registry(server, {
	           username : 'admin',
	           tenantId : -1234
	       });
	var rxtPath = '/_system/governance/android/';
	var path = rxtPath + ctx.provider + '/' +ctx.name+ '/' +ctx.version;
		var app = <metadata xmlns="http://www.wso2.org/governance/metadata">
            <overview>
                <provider>{ctx.provider}</provider>
                <name>{ctx.name}</name>
                <version>{ctx.version}</version>
                <url>{ctx.url}</url>
                <status>CREATED</status>
				<description>{ctx.description}</description>
				<recent_changes>{ctx.recentChanges}</recent_changes>
				<package_name>{ctx.package_name}</package_name>
				<category>{ctx.category}</category>
            </overview>
			<images>
				<icon>{ctx.icon}</icon>
				<banner>{ctx.banner}</banner>
				<screenshots>{ctx.screenshots}</screenshots>
			</images>
        </metadata>;
	log.info(app.toXMLString());
	log.info(ctx);
	registry.put(path, {
			    mediaType: 'application/vnd.wso2-android+xml',
			    content: app.toXMLString()
			});
});

router.get('apps', function(ctx){
	var carbon = require('carbon'),
	       server = new carbon.server.Server(),
	       registry = new carbon.registry.Registry(server, {
	           username : 'admin',
	           tenantId : -1234
	       }),
	       am = new carbon.registry.ArtifactManager(registry, 'android');
	var items =am.list();
	print(sp(items));
});
router.get('test', function(ctx){
	var carbon = require('carbon'),
	       server = new carbon.server.Server(),
	       registry = new carbon.registry.Registry(server, {
	           username : 'admin',
	           tenantId : -1234
	       }),
	am = new carbon.registry.ArtifactManager(registry, 'android');
	log.info(am.get("5e57396c-00ec-47d6-ade7-1ccfe2f7592a"));
});

router.put('apps', function(ctx){
	//To implement
});



var change = function(type, id){
	var carbon = require('carbon'),
	       server = new carbon.server.Server(),
	       registry = new carbon.registry.Registry(server, {
	           username : 'admin',
	           tenantId : -1234
	       }),
	am = new carbon.registry.ArtifactManager(registry, 'android');
	var items = am.list();
	for (var i = items.length - 1; i >= 0; i--){
		var item = items[i];
		log.info(item.attributes.overview_status + item.id);			
		if(item.id==id){
			item.attributes.overview_status = type;
			log.info(item.attributes.overview_status);
			var app = <metadata xmlns="http://www.wso2.org/governance/metadata">
	            <overview>
	                <provider>{item.attributes.overview_provider}</provider>
	                <name>{item.attributes.overview_name}</name>
	                <version>{item.attributes.overview_version}</version>
	                <url>{item.attributes.overview_url}</url>
	                <status>{item.attributes.overview_status}</status>
					<description>{item.attributes.overview_description}</description>
					<recent_changes>{item.attributes.overview_recentChanges}</recent_changes>
					<package_name>{item.attributes.overview_package_name}</package_name>
					<category>{item.attributes.category}</category>
	            </overview>
				<images>
					<icon>{item.attributes.images_icon}</icon>
					<banner>{item.attributes.images_banner}</banner>
					<screenshots>{item.attributes.images_screenshots}</screenshots>
				</images>
	        </metadata>;
			registry.put(item.path, {
					    mediaType: item.mediaType,
					    content: app.toXMLString()
					});
			return;
		}
	};
	response.sendError(404);
}
// router.get('apps', function(ctx){
//    var store = require('/modules/publisher.js');
//    var type, total, assets,tag = ctx.tag, sort = ctx.sort,paging = store.assetsPaging(request);
//    type = ctx.type;
//    if (tag) {
//        total = store.assetCount(type, {
//            tag: tag
//        });
//        if (paging.start > total || paging.start < 0) {
//            response.sendError(404, 'Requested page cannot be found');
//            return;
//        }
//        assets = store.tagged(type, tag, paging);
//    } else {
//        total = store.assetCount(type);
//        if (paging.start > total || paging.start < 0) {
//            response.sendError(404, 'Requested page cannot be found');
//            return;
//        }
//        assets = store.assets('Android', 1);
//    }  
// });
// 
// router.post('apps', function(ctx){
// 	var server = require('/modules/server.js');
// 	var user = require('/modules/user.js');
// 	new Log().info(user.userRegistry());
// 	store.addAsset('android','<metadata xmlns="http://www.wso2.org/governance/metadata"><overview><provider>WSO2Mobile</provider><name>WSO2 Agent</name><version>0.1</version><url>http://sdfsdf.com</url><status>CREATED</status></overview></metadata>');
// 	
// });
var sp = function(items){
	var arr = [];
	for (var i = items.length - 1; i >= 0; i--){
		var item = items[i];
		if(item.attributes.overview_status=="PUBLISHED"){
			arr.push(spli(item));
		}
	};
	return arr;
}
var spli = function(item){
	if(item.attributes.overview_status=="PUBLISHED"){
		item.attributes.images_screenshots =item.attributes.images_screenshots.split(',');
		return item;
	}
	return null;
}
mvc.route(request);
%>