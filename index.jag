<%
var absolute = require ('modules/absolute.js').mvc;
var goose = require('modules/goose.js').goose;
var router = new goose({CONTEXT: "/publisher/api/"});
var moment= require('modules/moment.js').moment;
var log =new Log();

var mvc = new absolute({
	SERVER_URL:"/publisher/",
	IGNORE:["sso.jag", "login.jag", "logout.jag","test.jag"],
	API:"api",
	ROUTER: router
});

router.post('apps/upload',function(ctx){
	var files = ctx.files;
	var names = [];
	for(var name in files) {
		var file = files[name];
		var fileName = file.getName();
		//Assuming that the extension is of 3 letters
		var fileDistinctName= fileName.substring(0, fileName.length-4);
		//Initial file saving
		var path ="/uploads/"+makeid()+fileName;
		file.saveAs(path);
		var index = fileName.lastIndexOf('.');
	    var ext = index < fileName.length ? fileName.substring(index + 1) : '';
	
	    //Only for IPA files
		if(ext=="ipa"){
			//Save the zip file
			var zipLocation = "/uploads/"+makeid()+fileName;
			file.saveAs(zipLocation+".zip");
			//Read the mobileconfig file
			Packages.java.lang.Thread.sleep(6000);
			log.info(zipLocation+"/Payload/"+fileDistinctName+".app/embedded.mobileprovision");
 			var mobileConfig = new File(zipLocation+"/Payload/"+fileDistinctName+".app/embedded.mobileprovision");
			mobileConfig.open("r");
			var text = mobileConfig.readAll();
			mobileConfig.close();
			var begining = text.indexOf('<?xml version="1.0" encoding="UTF-8"?>');
			var end = text.indexOf("</plist>");
			text = text.substring(begining, end);
			log.info(text);
			var data = new XML(text);
			log.info(data.dict.string);
			var iosManifest = mvc.compileTemplate("/apis/ios_profile.hbs", {url:"http://10.200.3.163:9763/iostest/Phonebook.ipa", bundleid: "com.wso2mobile.phonebook.Phonebook"});
			var plistName = '/uploads/'+makeid()+file.getName().substr(ext)[0]+".plist";
			var plist = new File(plistName);
			plist.open("w");
			plist.write(iosManifest);
			plist.close();
			names.push(plistName);
			continue;
		}
	    names.push("/publisher/uploads/"+makeid()+file.getName());
	}
	print(names);
});

router.post('apps/{id}/publish', function(ctx){
	var platform = ctx.platform||"android";
	change("IN-REVIEW",ctx.id,platform);
});
router.post('apps/{id}/remove', function(ctx){
	var platform = ctx.platform||"android";
	change("REMOVED",ctx.id,platform);
});
router.post('apps/{id}/accept', function(ctx){
	var platform = ctx.platform||"android";
	change("LIVE",ctx.id,platform);
});
router.post('apps/{id}/reject', function(ctx){
	var platform = ctx.platform||"android";
	change("REJECTED",ctx.id,platform,ctx.message);
});
router.post('apps/{id}/hold', function(ctx){
	var platform = ctx.platform||"android";
	change("ONHOLD",ctx.id,platform);
});
router.post('apps/{id}/live', function(ctx){
	var platform = ctx.platform||"android";
	change("LIVE",ctx.id,platform);
});
router.get('dev/{id}/apps',function(ctx){
	var publisher = require('/modules/publisher.js');
	assets = publisher.assets('android', 1, ctx.id);
	print(assets);
});

// Still the lifecycles aren't working. There is noattachlifecyle in genericartifact class
router.post('apps',function(ctx){
	var t = ctx.platform || "android";
	var carbon = require('carbon'),
	       server = new carbon.server.Server(),
	       registry = new carbon.registry.Registry(server, {
	           username : 'admin',
	           tenantId : -1234
	       });
	var rxtPath = '/_system/governance/android/';
	var files = request.getAllFiles();
	log.info(files);
	var banner = files['bannerFile'];
 	banner = saveFile(banner);

	var icon = files['iconFile'];
	icon = saveFile(icon);
	
	var screenshot1 = files['screenshot1File'];
	screenshot1 = saveFile(screenshot1);
	
	var screenshot2 = files['screenshot2File'];
	screenshot2 = saveFile(screenshot2);
	
	var screenshot3 = files['screenshot3File'];
	screenshot3 = saveFile(screenshot3);
	
	var screenshots = [screenshot1,screenshot2,screenshot3];
	var path = rxtPath + ctx.provider + '/' +ctx.name+ '/' +ctx.version;
	
	var carbon = require('carbon'),
	       server = new carbon.server.Server(),
	       registry =new carbon.registry.Registry(server, {
	           username : 'admin',
	           tenantId : -1234
	       });
	// Packages.org.wso2.carbon.governance.api.util.GovernanceUtils.loadGovernanceArtifacts(registry.registry);
	am = new carbon.registry.ArtifactManager(registry, platform);
	var attributes ={
        overview_status: "PENDING-REVIEW",
        overview_name: ctx.name,
        overview_version: ctx.version,
        overview_url: ctx.url,
        overview_provider: ctx.provider,
		overview_description: ctx.description,
		// overview_recentChanges:ctx.recentChanges,
		// overview_packageName:ctx.package_name,
		overview_category:ctx.category,
		images_icon:icon,
		images_banner:banner,
		images_screenshots:screenshots
    };
	attributes[attributes.overview_status+"_date"]=printDate();
	am.add({
	    name: ctx.name,
		lifecycle:["applifecycle"],
		path:path,
		attributes:attributes 
	});
	response.sendRedirect('/publisher/console/list');
});

router.get('apps', function(ctx){
	var carbon = require('carbon'),
	       server = new carbon.server.Server(),
	       registry = new carbon.registry.Registry(server, {
	           username : 'admin',
	           tenantId : -1234
	       }),
	am = new carbon.registry.ArtifactManager(registry, 'android');
	var items =am.list();
	items = sp(items);
	items = filterById(items);
	var state = ctx.state;
	var platform = ctx.platform;
	var sort = ctx.sort;
	if(state!=undefined){
		items = filterByState(items,state.toUpperCase());
	}
	if(platform!=undefined){
		if(platform=="android"){
			platform = "application/vnd.wso2-android+xml";
		}else if(platform=="ios"){
			platform = "application/vnd.wso2-ios+xml";
		}
		items = filterByType(items, platform);
	}
	if(sort!=undefined){
		if(sort=="date"){
			items.sort(function (l, r) {
			   var date1 =parseDate(l.attributes['overview_'+l.attributes.overview_status+"_date"]).toDate();
			   var date2 = parseDate(r.attributes['overview_'+r.attributes.overview_status+"_date"]).toDate();
			   return date2<date1?-1:date2>date1?1:0;
		    });
		}
	}
	print(items);
});
router.get('test', function(ctx){
	var carbon = require('carbon'),
	       server = new carbon.server.Server(),
	       registry = new carbon.registry.Registry(server, {
	           username : 'admin',
	           tenantId : -1234
	       });
	var platform = ctx.platform||"android";
	var am = new carbon.registry.ArtifactManager(registry, platform);
	log.info(am.get("5e57396c-00ec-47d6-ade7-1ccfe2f7592a"));
});

router.put('apps', function(ctx){
	//To implement
});
var filterById =function(items, id){
	var ite=[];
	for (var i = items.length - 1; i >= 0; i--){
	   var item = items[i];
	   if(item.attributes.id==id){
			ite.push(item);
		}
	};
	log.info(ite);
	return ite;
}
var filterByState = function(items,state){
	var ite=[];
	for (var i = items.length - 1; i >= 0; i--){
	   var item = items[i];
	   if(item.attributes.overview_status==state){
			ite.push(item);
		}
	};
	log.info(ite);
	return ite;
}
var filterByType = function(items,type){
	var ite=[];
	for (var i = items.length - 1; i >= 0; i--){
	   var item = items[i];
	   if(item.mediaType==type){
			ite.push(item);
		}
	};
	return ite;
}
var saveFile = function(file){
	log.info(file.getName());
	if(file.getName()==""){
		return "";
	}
	var uid= makeid();
	file.saveAs("/uploads/"+uid+file.getName());
	return "/publisher/uploads/"+uid+file.getName();
}


var change = function(type, id,platform,message){
	var carbon = require('carbon'),
	       server = new carbon.server.Server(),
	       registry = new carbon.registry.Registry(server, {
	           username : 'admin',
	           tenantId : -1234
	       });
	am = new carbon.registry.ArtifactManager(registry, platform);
	var item =	am.get(id);
	// log.info(item.attributes.overview_status + item.id);			
	if(item.id==id){
		item.attributes.overview_status = type;
		var date= new Date();
		item.attributes['overview_'+type+"_date"]  = printDate();
		if(message!=undefined){
			item.attributes["overview_REJECTED_reason"] = message;
		}
		am.update(item);
		return;
	}
	response.sendError(404);
}
var sp = function(items){
	var arr = [];
	for (var i = items.length - 1; i >= 0; i--){
		var item = items[i];
		if(item.attributes.overview_status!="REMOVED"){
			arr.push(spli(item));
		}
	};
	return arr;
}
var spli = function(item){
	if(item.attributes.images_screenshots!=undefined){
		item.attributes.images_screenshots =item.attributes.images_screenshots.split(',');
	}
	return item;
}
var printDate = function(){
	var date = new moment();
	return date.format("YYYY-MM-DD HH:mm:ss.SSS");
}
var parseDate = function(string){
	return moment(string,"YYYY-MM-DD HH:mm:ss.SSS");
}
var makeid= function()
{
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for( var i=0; i < 5; i++ )
        text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
}
mvc.route(request);
%>